version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: health_postgres
    environment:
      POSTGRES_DB: health_optimization
      POSTGRES_USER: health_user
      POSTGRES_PASSWORD: health_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - health_network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: health_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - health_network

  # FastAPI Backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: health_backend
    environment:
      - DATABASE_URL=postgresql://health_user:health_password@postgres:5432/health_optimization
      - REDIS_URL=redis://redis:6379
      - ENVIRONMENT=development
      - SECRET_KEY=your-secret-key-here
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app/backend
      - ./ml_pipeline:/app/ml_pipeline
      - ./device_integrations:/app/device_integrations
    depends_on:
      - postgres
      - redis
    networks:
      - health_network
    command: uvicorn backend.api.health_api:app --host 0.0.0.0 --port 8000 --reload

  # ML Model Service
  ml_service:
    build:
      context: .
      dockerfile: ml_pipeline/Dockerfile
    container_name: health_ml_service
    environment:
      - MODEL_PATH=/app/models
      - REDIS_URL=redis://redis:6379
    ports:
      - "8001:8001"
    volumes:
      - ./ml_pipeline:/app/ml_pipeline
      - ml_models:/app/models
    depends_on:
      - redis
    networks:
      - health_network

  # Next.js Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: health_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./components:/app/components
      - ./app:/app/app
      - ./lib:/app/lib
      - ./public:/app/public
      - ./styles:/app/styles
    networks:
      - health_network
    command: npm run dev

  # Device Sync Service
  device_sync:
    build:
      context: .
      dockerfile: device_integrations/Dockerfile
    container_name: health_device_sync
    environment:
      - DATABASE_URL=postgresql://health_user:health_password@postgres:5432/health_optimization
      - REDIS_URL=redis://redis:6379
      - FITBIT_CLIENT_ID=${FITBIT_CLIENT_ID}
      - FITBIT_CLIENT_SECRET=${FITBIT_CLIENT_SECRET}
      - OURA_CLIENT_ID=${OURA_CLIENT_ID}
      - OURA_CLIENT_SECRET=${OURA_CLIENT_SECRET}
    volumes:
      - ./device_integrations:/app/device_integrations
    depends_on:
      - postgres
      - redis
    networks:
      - health_network

  # Monitoring and Observability
  prometheus:
    image: prom/prometheus:latest
    container_name: health_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - health_network

  grafana:
    image: grafana/grafana:latest
    container_name: health_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - health_network

volumes:
  postgres_data:
  redis_data:
  ml_models:
  prometheus_data:
  grafana_data:

networks:
  health_network:
    driver: bridge
